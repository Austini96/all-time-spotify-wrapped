version: '3.8'

x-airflow-common:
  &airflow-common
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: SequentialExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: sqlite:////opt/airflow/airflow.db
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # OpenLineage configuration for Marquez
    OPENLINEAGE_URL: http://marquez-api:5000
    OPENLINEAGE_NAMESPACE: spotify_analytics
    # AIRFLOW__LINEAGE__BACKEND: openlineage.airflow.lineage_backend.OpenLineageBackend
    # Note: Airflow lineage backend disabled - using dbt-ol for lineage emission instead
    # dbt-ol configuration
    OPENLINEAGE_DBT_JOB_NAME: dbt_spotify_analytics
    # Spotify API credentials
    SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
    SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
    SPOTIFY_REDIRECT_URI: ${SPOTIFY_REDIRECT_URI}
    # Slack alerts
    SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./scripts:/opt/airflow/scripts
    - ./dbt_project:/opt/airflow/dbt_project
    - ./data:/opt/airflow/data
    - ./requirements.txt:/requirements.txt
    - airflow-db:/opt/airflow
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    - metabase

volumes:
  airflow-db:
  metabase-data:
  marquez-db-data:

services:
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    container_name: airflow-init
    command:
      - -c
      - |
        echo "Starting Airflow initialization..."
        mkdir -p /opt/airflow/logs /opt/airflow/dags /opt/airflow/data/raw /opt/airflow/data/duckdb /opt/airflow/data/exports
        chmod -R 777 /opt/airflow/logs
        chmod -R 777 /opt/airflow/data
        echo "Running database migration..."
        airflow db migrate
        echo "Creating admin user..."
        airflow users create \
          --username admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com \
          --password admin || echo "User already exists"
        echo "Initialization complete!"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin
    restart: "no"

  metabase:
    build:
      context: .
      dockerfile: Dockerfile.metabase
      args:
        METABASE_VERSION: v0.51.3
        METABASE_DUCKDB_DRIVER_VERSION: 1.4.1.0
    container_name: metabase
    ports:
      - "3000:3000"
    environment:
      MB_DB_TYPE: h2
      MB_DB_FILE: /metabase-data/metabase.db
      MB_PLUGINS_DIR: /plugins
    volumes:
      - ./data:/data
      - metabase-data:/metabase-data
    restart: always

  # Marquez - OpenLineage backend (Postgres database)
  marquez-db:
    image: postgres:14
    container_name: marquez-db
    environment:
      POSTGRES_USER: marquez
      POSTGRES_PASSWORD: marquez
      POSTGRES_DB: marquez
    volumes:
      - marquez-db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always

  # Marquez API server
  marquez-api:
    image: marquezproject/marquez:latest
    container_name: marquez-api
    environment:
      MARQUEZ_PORT: 5000
      MARQUEZ_ADMIN_PORT: 5001
      POSTGRES_HOST: marquez-db
      POSTGRES_PORT: 5432
      POSTGRES_DB: marquez
      POSTGRES_USER: marquez
      POSTGRES_PASSWORD: marquez
    ports:
      - "5000:5000"
      - "5001:5001"
    depends_on:
      - marquez-db
    restart: always

  # Marquez Web UI
  marquez-web:
    image: marquezproject/marquez-web:latest
    container_name: marquez-web
    environment:
      MARQUEZ_HOST: marquez-api
      MARQUEZ_PORT: 5000
      WEB_PORT: 3000
    ports:
      - "3001:3000"
    depends_on:
      - marquez-api
    restart: always